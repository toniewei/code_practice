class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        // PreOrder --> get root ; InOrder --> get left and right
        // Edge case
        if(preorder == null || inorder == null || preorder.length == 0 || inorder.length == 0)  return null;
        
        TreeNode root = new TreeNode(preorder[0]);
        
        int partIndex = findPartitionIndex(inorder, preorder[0]);
        int[] inLeft = Arrays.copyOfRange(inorder, 0, partIndex);
        int[] inRight = Arrays.copyOfRange(inorder, partIndex + 1, inorder.length);
        int[] preLeft = Arrays.copyOfRange(preorder, 1, partIndex + 1);   // here need to plus one
        int[] preRight = Arrays.copyOfRange(preorder, partIndex + 1, preorder.length);
        
        root.left = buildTree(preLeft, inLeft);
        root.right = buildTree(preRight, inRight);
        return root;
    }
    public int findPartitionIndex(int[] arr, int target) {
        for(int i = 0; i < arr.length; i++)
            if(arr[i] == target)
                return i;
        return 0;
    }
}
