public class Solution {
    class TrieNode{
        public final TrieNode [] children = new TrieNode[2];
        public int number;
    }
    void addToTrie(TrieNode root, int number){
        for(int i = 31; i >= 0; i--){
            int index = (number & (1 << i)) == 0 ? 0 : 1;
            if(root.children[index] == null) root.children[index] = new TrieNode();
            root = root.children[index];
        }
        root.number = number;
    }
    int getFromTrie(TrieNode root,int number){
        for(int i = 31; i >= 0; i--){
            int index = (number & (1 << i)) == 0 ? 0 : 1;
            if(root.children[1 - index] != null)root = root.children[1 - index];
            else root = root.children[index];
        }
        return root.number;
    }
    
    public int findMaximumXOR(int[] nums) {
        int maxXor = 0;
        TrieNode root = new TrieNode();
        for(int i : nums){
            addToTrie(root,i);
            int found = getFromTrie(root,i);
            maxXor = Math.max(maxXor,i ^ found);         
        }
        return maxXor;
    }
}
