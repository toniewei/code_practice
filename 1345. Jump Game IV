import java.util.*;

class Solution {


    class Node{
        int val;
        int idx;
        int steps;
        public Node(int val, int idx, int steps){
            this.val = val;
            this.idx = idx;
            this.steps = steps;
        }
    }

    public int minJumps(int[] arr) {

        Set<Integer> idxSet = new HashSet<>();
        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i=0;i<arr.length;i++){
            if (i-1>=0 && i+1<arr.length && arr[i]==arr[i+1] && arr[i-1] == arr[i]) continue;
            map.putIfAbsent(arr[i],new ArrayList<>());
            map.get(arr[i]).add(i);
        }

        Queue<Node> queue = new ArrayDeque<>();
        queue.add(new Node(arr[0],0,0));
        idxSet.add(0);

        while (!queue.isEmpty()){

            int len = queue.size();
            for (int i=0;i<len;i++){
                Node popped = queue.poll();
                if (popped.idx == arr.length-1) return popped.steps;

                int curStep = popped.steps;
                int nextIdx = popped.idx+1;
                int preIdx = popped.idx-1;
                List<Integer> sameValIdx =map.getOrDefault(arr[popped.idx],new ArrayList<>());

                if (nextIdx<arr.length && !idxSet.contains(nextIdx)) {queue.add(new Node(arr[nextIdx],nextIdx,curStep+1));idxSet.add(nextIdx);}
                if (preIdx>=0 && !idxSet.contains(preIdx)) {queue.add(new Node(arr[preIdx],preIdx,curStep+1));idxSet.add(preIdx);}

                for (int idx: sameValIdx){
                    if (!idxSet.contains(idx)){
                        queue.add(new Node(arr[idx],idx,curStep+1));
                        idxSet.add(idx);
                    }
                }

            }
        }

        return -1;
    }
}
