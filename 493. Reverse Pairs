class Solution {
    public int reversePairs(int[] nums) {
        return countReversePairs(nums, 0, nums.length);
    }
    
    private int countReversePairs(int[] nums, int l, int r) {
        if (l >= r - 1) return 0;

        int m = l + (r - l) / 2;
        int L = countReversePairs(nums, l, m);
        int R = countReversePairs(nums, m, r);

        int count = 0;
        int j = m;
        for (int i = l; i < m; i++) {
            while (j < r && nums[i] / 2.0 > nums[j]) j++;
            count += j - m;
        }

        merge(nums, l, m, r);
        
        return count + L + R;
    }
    
    private void merge(int[] nums, int l, int m, int r) {
        int[] temp = new int[r - l];
        int i = l, j = m, k = 0;
        while (i < m && j < r) {
            if (nums[i] < nums[j]) temp[k++] = nums[i++];
            else temp[k++] = nums[j++];
        }
        while (i < m) temp[k++] = nums[i++];
        while (j < r) temp[k++] = nums[j++];
        
        for (i = l, j = 0; i < r; i++, j++) {
            nums[i] = temp[j];
        }
    }
}
