class Solution {
    public List<List<Integer>> palindromePairs(String[] words) {
        Map<String,Integer> map = new HashMap<>();
        List<List<Integer>> res = new ArrayList<>();
        for (int i=0;i<words.length;i++) map.put(words[i],i);
        
        for (String word: words){
            if (word.length() == 0) {
                for (String key : map.keySet()) {
                    if (isPalidrome(key))   addToList(res, map.get(word), map.get(key));
                }
                continue;
            }
            for (int i=0;i<word.length();i++){
                String h = word.substring(0,i);
                String t = word.substring(i);
                if (isPalidrome(h)){
                    String rt = new StringBuilder(t).reverse().toString();
                   if (map.containsKey(rt)) addToList(res,map.get(rt),map.get(word));
                }
                if (isPalidrome(t)){
                    String rh = new StringBuilder(h).reverse().toString();
                    if (map.containsKey(rh)) addToList(res,map.get(word),map.get(rh));
                }
            }
        }
        return res;
    }

    private void addToList(List<List<Integer>> res, int a, int b){
        if (a==b) return;
        List<Integer> tmp = new ArrayList<>();
        tmp.add(a);
        tmp.add(b);
        res.add(tmp);
    }

    private boolean isPalidrome(String word){
        int l=0, r=word.length()-1;
        while(l<r){
            if (word.charAt(l++)!=word.charAt(r--)) return false;
        }
        return true;
    }
}
