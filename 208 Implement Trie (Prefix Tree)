class Trie {

    /** Initialize your data structure here. */
    boolean isWord;
    Trie[] tries;
    public Trie() {
        this.isWord = false;
        this.tries = new Trie[26];
    }

    /** Inserts a word into the trie. */
    public void insert(String word) {
        Trie node = this;
        for (char ch: word.toCharArray()){
            if (node.tries[ch - 'a'] == null) node.tries[ch - 'a'] = new Trie();
            node = node.tries[ch - 'a'];
        }
        node.isWord = true;
    }

    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        Trie node = this;
        for (char ch: word.toCharArray()){
            if (node.tries[ch - 'a'] == null) return false;
            node = node.tries[ch - 'a'];
        }
        return node.isWord;
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        Trie node = this;
        for (char ch: prefix.toCharArray()){
            if (node.tries[ch - 'a'] == null) return false;
            node = node.tries[ch - 'a'];
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
